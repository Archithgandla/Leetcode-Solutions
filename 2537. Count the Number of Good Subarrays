Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.


solution

class Solution {
    
    int combinations(int N){
        return ((N*(N-1))/2);
    }
    

    public long countGood(int[] nums, int k) { 
        int i=0,pairs = 0;
        long ans = 0;
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(int j=0;j<nums.length;j++){
               
            //System.out.println(i+" "+j);
            
            hm.put(nums[j],hm.getOrDefault(nums[j],0)+1);            
            
            if(hm.get(nums[j])>=2)
                pairs+=(hm.get(nums[j])-1);
            
                
            if(pairs>=k){
                while(pairs>=k && i<=j){
                    ans+=(nums.length-j);
                    pairs-=(hm.get(nums[i])-1);
                    hm.put(nums[i],hm.get(nums[i])-1);
                    
                    if(hm.get(nums[i]) == 0)
                        hm.remove(nums[i]);
                    
                    
                    i+=1;
                }
            }

                
        }
        
        return ans;
        
        
    }
}




//Brute Force
//         int ans = 0;
        
//         for(int i=0;i<nums.length;i++){
//             HashMap<Integer,Integer> hm = new HashMap<>();
//             int pairs = 0;    
            
//             for(int j=i;j<nums.length;j++){

//                 hm.put(nums[j],hm.getOrDefault(nums[j],0)+1);
                
//                 if(hm.get(nums[j])>=2){
//                     pairs-=combinations(hm.get(nums[j])-1);
//                     pairs+=combinations(hm.get(nums[j]));
//                 }
                
                
//                 ans+=(pairs>=k?1:0);
                
//             }   
            
//         }       
//         return ans;
